var documenterSearchIndex = {"docs":
[{"location":"#STSP.jl","page":"Home","title":"STSP.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [STSP]","category":"page"},{"location":"#STSP.AbstractEdge","page":"Home","title":"STSP.AbstractEdge","text":"Type abstrait dont d'autres types d'arêtes dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractGraph","page":"Home","title":"STSP.AbstractGraph","text":"Type abstrait dont d'autres types de graphes dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractNode","page":"Home","title":"STSP.AbstractNode","text":"Type abstrait dont d'autres types de noeuds dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Adjacency","page":"Home","title":"STSP.Adjacency","text":"Alias de type pour représenter un dictionnaire d'adjacence\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Edge","page":"Home","title":"STSP.Edge","text":"Type représentant les arêtes d'un graphe.\n\nExemple:\n\n    arête = Edge(\"E411\", 40000, \"Ottignies-Louvain-la-Neuve\", \"Namur\")\n    arête = Edge(\"E40\", 35000, \"Bruxelles\", \"Gand\")\n    arête = Edge(\"Meuse\", 45000, \"Liège\", \"Namur\")\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Edge-Union{Tuple{U}, Tuple{String, String, U}} where U<:Number","page":"Home","title":"STSP.Edge","text":"Construit une arête à partir d'un poids et de deux identifiants de noeud.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Edge-Union{Tuple{U}, Tuple{T}, Tuple{T, T, U}} where {T, U<:Number}","page":"Home","title":"STSP.Edge","text":"Construit une arête à partir d'un poids et de deux identifiants de noeud sous forme de nombre.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Forest","page":"Home","title":"STSP.Forest","text":"Type representant une forêt comme un ensemble d'identifiants de noeuds pointant vers des arbres.\n\nLes identifiants dérivent des identifiants des noeuds d'un graphe. A partir de l'identifiant du noeud d'un graphe, cette structure permet de trouver l'arbre associé dans le dictionnaire trees`. Si l'identifiant d'un noeud pointe vers un arbre dont le parent a le même identifiant, alors ce noeud est une \"racine\".  Les \"racines\" de l'arbre sont utiles pour les fusionner et pour vérifier l'existence de cycles.\n\nLe nombre de \"racines\" contenue dans la forêt est également stockée dans l'attribut num_roots.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Forest-Union{Tuple{Graph{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Home","title":"STSP.Forest","text":"Forest(G)\n\nInitialise une forêt de composantes connexes à partir d'un graphe. Un arbre de taille 1 est créé par noeud du graphe. Cette fonction est conçue pour servir à l'initialisation de l'algorithme de Kruskal.\n\nArguments\n\nG (Graph`): le graphe à partir duquel construire une forêt de composantes connexes\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Graph","page":"Home","title":"STSP.Graph","text":"Type representant un graphe comme un ensemble de noeuds et d'arêtes.\n\nExemple :\n\nnode1 = Node(\"Joe\", 3.14)\nnode2 = Node(\"Steve\", exp(1))\nnode3 = Node(\"Jill\", 4.12)\nedge1 = Edge(\"Joe-Steve\", 2, \"Joe\", \"Steve\")\nedge1 = Edge(\"Joe-Jill\", -5, \"Joe\", \"Jill\")\nG = Graph(\"Ick\", [node1, node2, node3], [edge1,edge2])\n\nDe façon interne, les noeuds et les arêtes sont stockés en tant que dictionnaire. Ceci permet de retrouver des noeuds/arêtes rapidement à partir de leurs identifiants. De plus, l'adjacence est stockée en tant que dictionnaire ce qui permet facilement d'accéder aux voisins d'un noeud. Attention, tous les noeuds doivent avoir des données de même type. Toutes les arêtes doivent également avoir des données du même type mais pas nécessairement le même type que celui des noeuds. De plus, les noms des noeuds et des arêtes doivent être uniques.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Graph-Union{Tuple{U}, Tuple{T}, Tuple{String, Array{Node{T}, 1}, Array{Edge{U}, 1}}} where {T, U}","page":"Home","title":"STSP.Graph","text":"\tGraph(name::String, nodes::Vector{Node{T}}, edges::Vector{Edge{U}})\n\nConstruit un graphe à partir d'une liste de noeud et d'arêtes.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Node","page":"Home","title":"STSP.Node","text":"Type représentant les noeuds d'un graphe.\n\nExemple:\n\n    noeud = Node(\"James\", [π, exp(1)])\n    noeud = Node(\"Kirk\", \"guitar\")\n    noeud = Node(\"Lars\", 2)\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Tree","page":"Home","title":"STSP.Tree","text":"Type representant un arbre comme l'identifiant d'un parent et une taille d'arbre.\n\nL'identifiant d'un parent dérive de l'identifiant du noeud d'un graphe. La taille d'un arbre est définie comme le nombre d'arbres qui ont cet arbre comme parent. Ce type est principalement utile pour le type Forest.\n\n\n\n\n\n","category":"type"},{"location":"#Base.show-Tuple{Graph}","page":"Home","title":"Base.show","text":"show(graph::Graph)\n\nAffiche un graphe.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{STSP.AbstractNode}","page":"Home","title":"Base.show","text":"\tshow(node::AbstractNode)\n\nAffiche un noeud.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Union{Tuple{STSP.AbstractEdge{U}}, Tuple{U}} where U","page":"Home","title":"Base.show","text":"show(edge::AbstractEdge{T,U})\n\nAffiche une arête.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_adjacency!-Union{Tuple{U}, Tuple{Dict{String, Array{Tuple{String, U}, 1}}, Edge{U}}} where U","page":"Home","title":"STSP.add_adjacency!","text":"add_adjacency!(adjacency::Dict{String, Vector{Tuple{String, U}}}, edge::Edge{U})\n\nAjoute une arête à un dictionnaire d'adjacence.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_edge!-Union{Tuple{U}, Tuple{T}, Tuple{Graph{T, U}, Edge{T}}} where {T, U}","page":"Home","title":"STSP.add_edge!","text":"add_edge!(graph::Graph{T,U}, edge::Edge{T})\n\nAjoute une arête au graphe. Met également à jour le dictionnaire d'adjacence du graphe. Si l'identifiant de l'arête existe déjà dans le graphe, une erreur est renvoyée. Si les identifiants de noeuds correspondant à l'arête n'existent pas dans le graphe, une erreur est renvoyée.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_edge-Union{Tuple{U}, Tuple{T}, Tuple{Graph{T, U}, Node{T}, Node{T}, U}} where {T, U<:Number}","page":"Home","title":"STSP.add_edge","text":"add_edge(graph::Graph{T,U}, node_1::Node{T}, node_2::Node{T}, weight::U)\n\nFonction de commodité. Crée dynamiquememnt une arête à partir des noeuds node_1 et node_2. L'information est vue comme un poids : l'argument weight doit être un nombre.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_node!-Union{Tuple{U}, Tuple{T}, Tuple{Graph{T, U}, Node{T}}} where {T, U}","page":"Home","title":"STSP.add_node!","text":"add_node!(graph::Graph{T,U}, node::Node{T})\n\nAjoute un noeud au graphe. Si l'identifiant du noeud existe déjà dans le graphe, une erreur est renvoyée.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.adjacency-Union{Tuple{Array{Edge{U}, 1}}, Tuple{U}} where U","page":"Home","title":"STSP.adjacency","text":"Construit un dictionnaire d'adjacence à partir d'une liste d'arêtes.\n\nExemple:\n\n    arête1 = Edge(\"E19\", 50000, \"Bruxelles, \"Anvers\")\n    arête2 = Edge(\"E40\", 35000, \"Bruxelles\", \"Gand\")\n    arête3 = Edge(\"E17\", 60000, \"Anvers\", \"Gand\")\n    arêtes = Vector{Edge{Int}}[arête1,arête2,arête3]\n    adjacency(arêtes) = \n        (\"Bruxelles\" => [(\"Anvers\", 50000), (\"Gand\", 35000)], \"Gand\" => [(\"Bruxelles\", 35000), (\"Anvers\", 60000)], \"Anvers\" => [(\"Bruxelles\", 50000), (\"Gand\", 60000)]).\n\n\n\n\n\n","category":"method"},{"location":"#STSP.data-Tuple{STSP.AbstractNode}","page":"Home","title":"STSP.data","text":"data(node::AbstractNode)\n\nRenvoie les données contenues dans le noeud.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.edges-Tuple{STSP.AbstractGraph}","page":"Home","title":"STSP.edges","text":"edges(graph::AbstractGraph)\n\nRenvoie la liste des arêtes d'un graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.find-Tuple{Forest, String}","page":"Home","title":"STSP.find","text":"find(forest, node_id)\n\nRetourne la racine de l'arbre associé au noeud d'identifiant node_id dans la forêt forest. Itère de parent en parent jusqu'à trouver un identifiant dont le parent est lui-même.\n\nArguments\n\nforest (Forest): forêt dans laquelle rechercher l'arbre auquel est rattaché le noeud\nnode_id (String): identifiant du noeud à rechercher dans la forêt\n\nExemple\n\njulia> find(\"24\", forest)\nTree(\"7\", 12)\n# Le noeud d'identifiant \"24\" est contenu dans l'arbre de la forêt dont la racine est d'identifiant \"7\", et de taille 12.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.kruskal-Union{Tuple{Graph{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Home","title":"STSP.kruskal","text":"Implémentation de l'algorithme de Kruskal pour les arbres recouvrants de poids minimal.\n\nEn entrée, la fonction reçoit un graphe.  La fonction renvoie un tuple contenant le coût et une liste des arêtes formant l'arbre de poids minimal.\n\nSi le graphe n'est pas connexe, une erreur est renvoyée.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.merge!-Tuple{Forest, String, String}","page":"Home","title":"STSP.merge!","text":"merge!(forest, root_id1, root_id2)\n\nFonction permettant de fusionner deux arbres à partir de deux identifiants qui ont la propriété d'être des \"racines\". La fusion s'opère en redéfinissant le parent d'une \"racine\" par l'autre \"racine\". Pour choisir quelle racine prend l'autre racine comme enfant, la taille des arbres associé est comparée ; l'arbre de plus grande taille englobe l'autre. Ce choix est justifié ici.\n\nArguments\n\nforest (Forest): forêt dans laquelle se trouvent les 2 arbres à fusionner\nroot_id1 (String): identifiant de la racine du premier arbre participant à la fusion\nroot_id2 (String): identifiant de la racine du second arbre participant à la fusion\n\nType de retour\n\nAucun : fonction in-place.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.n_nodes_to_read-Tuple{String, Int64, Int64}","page":"Home","title":"STSP.n_nodes_to_read","text":"nnodesto_read(format::String, n::Int, dim::Int)\n\nFonction auxiliaire de read_edges, qui détermine le nombre de noeud à lire en fonction de la structure du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.name-Tuple{Any}","page":"Home","title":"STSP.name","text":"name(n::Any)\n\nRenvoie le nom de l'objet passé en argument.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.nb_edges-Tuple{STSP.AbstractGraph}","page":"Home","title":"STSP.nb_edges","text":"nb_edges(graph::AbstractGraph)\n\nRenvoie le nombre d'arêtes d'un graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.nb_nodes-Tuple{STSP.AbstractGraph}","page":"Home","title":"STSP.nb_nodes","text":"nb_nodes(graph::AbstractGraph)\n\nRenvoie le nombre de noeuds du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.nodes-Tuple{STSP.AbstractGraph}","page":"Home","title":"STSP.nodes","text":"nodes(graph::AbstractGraph)\n\nRenvoie la liste des noeuds du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.plot_graph-Tuple{Any, Any}","page":"Home","title":"STSP.plot_graph","text":"Affiche un graphe étant donnés un ensemble de noeuds et d'arêtes.\n\nExemple :\n\ngraph_nodes, graph_edges = read_stsp(\"bayg29.tsp\")\nplot_graph(graph_nodes, graph_edges)\nsavefig(\"bayg29.pdf\")\n\n\n\n\n\n","category":"method"},{"location":"#STSP.plot_graph-Tuple{Graph}","page":"Home","title":"STSP.plot_graph","text":"Trace un graphe directement depuis un objet Graph.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.plot_graph-Tuple{String}","page":"Home","title":"STSP.plot_graph","text":"Fonction de commodité qui lit un fichier stsp et trace le graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_edges-Tuple{Dict{String, String}, String}","page":"Home","title":"STSP.read_edges","text":"read_edges(header::Dict{String}{String}, filename::String)\n\nAnalyse un fichier .tsp et renvoie une liste d'arêtes sous forme brute de tuples.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_header-Tuple{String}","page":"Home","title":"STSP.read_header","text":"read_header(filename::String)\n\nAnalyse un fichier .tsp et renvoie un dictionnaire avec les données de l'entête.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_nodes-Tuple{Dict{String, String}, String}","page":"Home","title":"STSP.read_nodes","text":"read_nodes(header::Dict{String}{String}, filename::String)\n\nAnalyse un fichier .tsp et renvoie une liste d'objets de type Node. Si les coordonnées ne sont pas données, les noeuds sont instanciés avec leur identifiant et NaN`. Le nombre de noeuds est dans header[\"DIMENSION\"].\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_stsp-Tuple{String}","page":"Home","title":"STSP.read_stsp","text":"read_stsp(filename::String; quiet::Bool=true)s\n\nLit un fichier .tsp et instancie un objet Graph correspondant après avoir construit ses noeuds et ses arêtes.\n\n\n\n\n\n","category":"method"}]
}
